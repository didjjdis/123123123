import logging
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
import requests
import os
import re
import sys
import asyncio
import hashlib
import glob
import time
from aiogram import types
from asyncio import sleep
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest
import sqlite3
import uuid
from aiogram.fsm.state import State, StatesGroup
from collections import deque
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, BotCommand, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
import subprocess
from datetime import datetime, timedelta, timezone
import psutil
import platform
import socket
import json
import shutil
import yookassa
from yookassa import Configuration, Payment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")
Configuration.configure(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)

# –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
class PaymentStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_payment_confirmation = State()

class SetEmoji(StatesGroup):
    waiting_for_emoji = State()

class RenameProfile(StatesGroup):
    waiting_for_new_name = State()
    waiting_for_rename_approve = State()

class VPNSetup(StatesGroup):
    entering_user_id = State()
    entering_client_name_manual = State()
    choosing_option = State()
    entering_client_name = State()
    entering_days = State()
    deleting_client = State()
    list_for_delete = State()
    choosing_config_type = State()
    choosing_protocol = State()
    choosing_wg_type = State()
    confirming_rename = State()

class AdminAnnounce(StatesGroup):
    waiting_for_text = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–±–ª–∏—Ü–µ–π –±–∞–ª–∞–Ω—Å–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–µ–π
def init_db(db_path):
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            profile_name TEXT,
            balance REAL DEFAULT 0.0
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS payments (
            payment_id TEXT PRIMARY KEY,
            user_id INTEGER,
            amount REAL,
            status TEXT,
            created_at TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
def save_profile_name(user_id, new_profile_name, db_path="/root/vpn.db"):
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute("SELECT id FROM users WHERE id=?", (user_id,))
    res = cur.fetchone()
    if res:
        cur.execute("UPDATE users SET profile_name=? WHERE id=?", (new_profile_name, user_id))
    else:
        cur.execute("INSERT INTO users (id, profile_name, balance) VALUES (?, ?, 0.0)", (user_id, new_profile_name))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_balance(user_id, db_path="/root/vpn.db"):
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute("SELECT balance FROM users WHERE id=?", (user_id,))
    res = cur.fetchone()
    conn.close()
    return res[0] if res else 0.0

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_balance(user_id, amount, db_path="/root/vpn.db"):
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute("UPDATE users SET balance = balance + ? WHERE id=?", (amount, user_id))
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
def save_payment(payment_id, user_id, amount, status, db_path="/root/vpn.db"):
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO payments (payment_id, user_id, amount, status, created_at) VALUES (?, ?, ?, ?, ?)",
        (payment_id, user_id, amount, status, datetime.now(timezone.utc))
    )
    conn.commit()
    conn.close()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
def update_payment_status(payment_id, status, db_path="/root/vpn.db"):
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute("UPDATE payments SET status=? WHERE payment_id=?", (status, payment_id))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
def get_payment_info(payment_id, db_path="/root/vpn.db"):
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute("SELECT user_id, amount, status FROM payments WHERE payment_id=?", (payment_id,))
    res = cur.fetchone()
    conn.close()
    return {"user_id": res[0], "amount": res[1], "status": res[2]} if res else None

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤
def get_all_users_balances(db_path="/root/vpn.db"):
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute("SELECT id, profile_name, balance FROM users")
    users = cur.fetchall()
    conn.close()
    return users

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "/root/vpn.db"
init_db(DB_PATH)

cancel_markup = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

USERS_FILE = "users.txt"
LAST_MENUS_FILE = "last_menus.json"
PENDING_FILE = "pending_users.json"
EMOJI_FILE = "user_emojis.json"
MAX_MENUS_PER_USER = 3
MAX_BOT_MENUS = 1

load_dotenv()
FILEVPN_NAME = os.getenv("FILEVPN_NAME")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not FILEVPN_NAME:
    raise RuntimeError("FILEVPN_NAME –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
if not ADMIN_ID:
    raise RuntimeError("ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
    raise RuntimeError("YOOKASSA_SHOP_ID –∏–ª–∏ YOOKASSA_SECRET_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env")
ADMIN_ID = int(ADMIN_ID)

ITEMS_PER_PAGE = 5
AUTHORIZED_USERS = [ADMIN_ID]
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

print(f"=== BOT START ===")
print(f"BOT_TOKEN starts with: {BOT_TOKEN[:8]}...")
print(f"ADMIN_ID: {ADMIN_ID} ({type(ADMIN_ID)})")
print(f"YOOKASSA_SHOP_ID: {YOOKASSA_SHOP_ID[:8]}...")
print(f"==================")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa
def create_payment(user_id, amount):
    idempotence_key = str(uuid.uuid4())
    payment = Payment.create({
        "amount": {
            "value": f"{amount:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://your-bot-domain.com/return"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
        },
        "capture": True,
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
        "metadata": {"user_id": user_id}
    }, idempotence_key)
    save_payment(payment.id, user_id, amount, payment.status)
    return payment

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
async def check_payment_status(payment_id):
    payment = Payment.find_one(payment_id)
    return payment.status

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
def create_user_menu(client_name, back_callback="main_menu", is_admin=False, user_id=None):
    balance = get_user_balance(user_id) if user_id else 0.0
    keyboard = [
        [InlineKeyboardButton(text="üì• –ü–æ–ª—É—á–∏—Ç—å OpenVPN", callback_data=f"select_openvpn_{client_name}")],
        [InlineKeyboardButton(text="üì• –ü–æ–ª—É—á–∏—Ç—å WireGuard", callback_data=f"get_wg_{client_name}")],
        [InlineKeyboardButton(text="üì• –ü–æ–ª—É—á–∏—Ç—å Amnezia", callback_data=f"get_amnezia_{client_name}")],
        [InlineKeyboardButton(text="üì• –ü–æ–ª—É—á–∏—Ç—å VLESS", callback_data=f"get_vless_{client_name}")],
        [InlineKeyboardButton(text=f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} RUB", callback_data="show_balance")],
        [InlineKeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_balance")],
    ]
    if is_admin:
        keyboard.append([InlineKeyboardButton(text="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º–æ–¥–∑–∏", callback_data=f"set_emoji_{client_name}")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
async def show_menu(chat_id, text, reply_markup):
    try:
        msg = await bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode="HTML")
        set_last_menu_id(chat_id, msg.message_id)
        return msg
    except Exception as e:
        print(f"[show_menu] –û—à–∏–±–∫–∞: {e}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ–Ω—é
def set_last_menu_id(user_id, msg_id):
    data = {}
    if os.path.exists(LAST_MENUS_FILE):
        with open(LAST_MENUS_FILE, "r") as f:
            data = json.load(f)
    user_id = str(user_id)
    data[user_id] = [msg_id]
    with open(LAST_MENUS_FILE, "w") as f:
        json.dump(data, f)

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ–Ω—é
def get_last_menu_ids(user_id):
    if not os.path.exists(LAST_MENUS_FILE):
        return []
    try:
        with open(LAST_MENUS_FILE, "r") as f:
            data = json.load(f)
        return data.get(str(user_id), [])
    except Exception:
        return []

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ–Ω—é
async def delete_last_menus(user_id):
    if not os.path.exists(LAST_MENUS_FILE):
        return
    with open(LAST_MENUS_FILE, "r") as f:
        data = json.load(f)
    ids = data.get(str(user_id), [])
    for mid in ids:
        try:
            await bot.delete_message(user_id, mid)
        except Exception:
            pass
    data[str(user_id)] = []
    with open(LAST_MENUS_FILE, "w") as f:
        json.dump(data, f)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
def add_pending(user_id, username, fullname):
    pending = {}
    if os.path.exists(PENDING_FILE):
        with open(PENDING_FILE, "r") as f:
            pending = json.load(f)
    pending[str(user_id)] = {"username": username, "fullname": fullname}
    with open(PENDING_FILE, "w") as f:
        json.dump(pending, f)

# –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
def remove_pending(user_id):
    if not os.path.exists(PENDING_FILE):
        return
    with open(PENDING_FILE, "r") as f:
        pending = json.load(f)
    pending.pop(str(user_id), None)
    with open(PENDING_FILE, "w") as f:
        json.dump(pending, f)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞–Ω–∏—è
def is_pending(user_id):
    if not os.path.exists(PENDING_FILE):
        return False
    try:
        with open(PENDING_FILE, "r") as f:
            pending = json.load(f)
    except Exception:
        pending = {}
    return str(user_id) in pending

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def safe_send_message(chat_id, text, **kwargs):
    print(f"[SAFE_SEND] chat_id={chat_id}, text={text[:50]}, kwargs={kwargs}")
    try:
        await bot.send_message(chat_id, text, **kwargs)
        print(f"[SAFE_SEND] success to {chat_id}!")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è] chat_id={chat_id}: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_registered(user_id):
    return bool(get_profile_name(user_id))

APPROVED_FILE = "approved_users.txt"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º–æ–¥–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def set_user_emoji(user_id, emoji):
    data = {}
    if os.path.exists(EMOJI_FILE):
        with open(EMOJI_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    data[str(user_id)] = emoji
    with open(EMOJI_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_emoji(user_id):
    if not os.path.exists(EMOJI_FILE):
        return ""
    with open(EMOJI_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    return data.get(str(user_id), "")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_approved_user(user_id):
    user_id = str(user_id)
    if not os.path.exists(APPROVED_FILE):
        return False
    with open(APPROVED_FILE, "r") as f:
        approved = [line.strip() for line in f]
    return user_id in approved

# –û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def approve_user(user_id):
    user_id = str(user_id)
    if not is_approved_user(user_id):
        with open(APPROVED_FILE, "a") as f:
            f.write(user_id + "\n")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_id(user_id):
    try:
        user_id = str(user_id)
        if not os.path.exists(USERS_FILE):
            with open(USERS_FILE, "w") as f:
                f.write(f"{user_id}\n")
        else:
            with open(USERS_FILE, "r+") as f:
                users = set(line.strip() for line in f)
                if user_id not in users:
                    f.write(f"{user_id}\n")
    except Exception as e:
        print(f"[save_user_id] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ user_id: {e}")

# –£–¥–∞–ª–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def remove_user_id(user_id):
    if not os.path.exists(USERS_FILE):
        return
    try:
        with open(USERS_FILE, "r") as f:
            lines = [line.strip() for line in f if line.strip().isdigit()]
        updated = [line for line in lines if line != str(user_id)]
        with open(USERS_FILE, "w") as f:
            for uid in updated:
                f.write(f"{uid}\n")
    except Exception as e:
        print(f"[remove_user_id] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å {USERS_FILE}: {e}")

# –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def remove_approved_user(user_id):
    if not os.path.exists(APPROVED_FILE):
        return
    try:
        with open(APPROVED_FILE, "r") as f:
            lines = [line.strip() for line in f]
        updated = [line for line in lines if line != str(user_id)]
        with open(APPROVED_FILE, "w") as f:
            for uid in updated:
                f.write(f"{uid}\n")
    except Exception as e:
        print(f"[remove_approved_user] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å {APPROVED_FILE}: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è
def get_profile_name(user_id, db_path="/root/vpn.db"):
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute("SELECT profile_name FROM users WHERE id=?", (user_id,))
    res = cur.fetchone()
    conn.close()
    return res[0] if res else None

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
def get_user_id_by_name(client_name, db_path="/root/vpn.db"):
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute("SELECT id FROM users WHERE profile_name=?", (client_name,))
    res = cur.fetchone()
    conn.close()
    return res[0] if res else None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
def get_cert_expiry_info(client_name):
    try:
        result = subprocess.run(
            ["/etc/openvpn/easyrsa3/easyrsa", "--batch", "show-cert", client_name],
            capture_output=True,
            text=True,
        )
        if result.returncode != 0:
            return None
        expiry_match = re.search(r"notAfter=([^\n]+)", result.stdout)
        if not expiry_match:
            return None
        expiry_date = datetime.strptime(expiry_match.group(1), "%b %d %H:%M:%S %Y %Z")
        days_left = (expiry_date - datetime.now()).days
        return {"days_left": days_left}
    except Exception:
        return None

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
async def execute_script(option: str, client_name: str = "", days: str = ""):
    cmd = ["/root/antizapret/client.sh", option]
    if client_name:
        cmd.append(client_name)
    if days:
        cmd.append(days)
    try:
        process = await asyncio.create_subprocess_exec(
            *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()
        return {
            "returncode": process.returncode,
            "stdout": stdout.decode(),
            "stderr": stderr.decode(),
        }
    except Exception as e:
        return {"returncode": 1, "stdout": "", "stderr": str(e)}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
async def client_exists(vpn_type: str, client_name: str) -> bool:
    clients = await get_clients(vpn_type)
    return client_name in clients

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
async def get_clients(vpn_type: str):
    option = "3" if vpn_type == "openvpn" else "6"
    result = await execute_script(option)
    if result["returncode"] == 0:
        clients = [
            c.strip()
            for c in result["stdout"].split("\n")
            if c.strip()
            and not c.startswith("OpenVPN client names:")
            and not c.startswith("WireGuard/AmneziaWG client names:")
            and not c.startswith("OpenVPN - List clients")
            and not c.startswith("WireGuard/AmneziaWG - List clients")
        ]
        return clients
    return []

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–≥–∞
def get_online_users_from_log():
    users = {}
    try:
        with open("/var/log/openvpn-status.log", "r") as f:
            for line in f:
                if line.startswith("CLIENT_LIST"):
                    parts = line.strip().split(",")
                    if len(parts) > 3:
                        users[parts[1]] = "OpenVPN"
    except Exception:
        pass
    return users

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard
def get_online_wg_peers():
    peers = {}
    try:
        result = subprocess.run(["wg", "show", "wg0"], capture_output=True, text=True)
        lines = result.stdout.split("\n")
        current_peer = None
        for line in lines:
            line = line.strip()
            if line.startswith("peer:"):
                current_peer = line.split()[1]
            elif line.startswith("endpoint:") and current_peer:
                for base in ["/root/antizapret/client/wireguard", "/root/antizapret/client/amneziawg"]:
                    for root, _, files in os.walk(base):
                        for fname in files:
                            if fname.endswith(".conf"):
                                path = os.path.join(root, fname)
                                try:
                                    with open(path, encoding="utf-8") as cf:
                                        content = cf.read()
                                        if current_peer in content:
                                            client_name = fname.split("-")[1].split(".")[0]
                                            peers[client_name] = "WG" if "wireguard" in root else "Amnezia"
                                            break
                                except Exception:
                                    pass
                            if current_peer in peers:
                                break
                        if current_peer in peers:
                            break
    except Exception as e:
        print(f"[ERROR] wg show: {e}")
    return peers

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def create_confirmation_keyboard(client_name: str, vpn_type: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{vpn_type}_{client_name}"
                ),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete"),
            ]
        ]
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
def create_client_list_keyboard(clients, page: int, total_pages: int, vpn_type: str, action: str):
    start = (page - 1) * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    keyboard = []
    for client in clients[start:end]:
        keyboard.append(
            [InlineKeyboardButton(text=client, callback_data=f"{action}_{vpn_type}_{client}")]
        )
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{action}_{vpn_type}_{page-1}")
        )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{action}_{vpn_type}_{page+1}")
        )
    if nav_buttons:
        keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é OpenVPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def create_openvpn_config_menu(client_name):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û–±—ã—á–Ω—ã–π VPN", callback_data=f"send_ovpn_vpn_default_{client_name}"
                ),
                InlineKeyboardButton(
                    text="Antizapret", callback_data=f"send_ovpn_antizapret_default_{client_name}"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cancel_openvpn_config_{client_name}"
                )
            ],
        ]
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é WireGuard –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def create_wireguard_config_menu(client_name):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û–±—ã—á–Ω—ã–π VPN", callback_data=f"send_wg_vpn_wg_{client_name}"
                ),
                InlineKeyboardButton(
                    text="Antizapret", callback_data=f"send_wg_antizapret_wg_{client_name}"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cancel_openvpn_config_{client_name}"
                )
            ],
        ]
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    keyboard = [
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="users_menu")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å", callback_data="add_del_menu")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã VPN", callback_data="7")],
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤", callback_data="8")],
        [InlineKeyboardButton(text="–ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞", callback_data="admin_pending_list")],
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º VPN", callback_data="server_manage_menu")],
        [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="announce_menu")],
        [InlineKeyboardButton(text="–í —Å–µ—Ç–∏", callback_data="who_online")],
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="view_all_balances")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
def create_server_manage_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞", callback_data="restart_bot")],
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="reboot_server")],
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="main_menu")],
        ]
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤–∫–ª–∞–¥–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def make_users_tab_keyboard(active_tab: str):
    tabs = [
        ("–í—Å–µ", "users_tab_all"),
        ("–í —Å–µ—Ç–∏", "users_tab_online"),
        ("–°–∫–æ—Ä–æ –ë–ë", "users_tab_expiring"),
    ]
    buttons = []
    for title, cb in tabs:
        text = f"¬ª {title} ¬´" if cb == active_tab else title
        buttons.append(InlineKeyboardButton(text=text, callback_data=cb))
    return InlineKeyboardMarkup(inline_keyboard=[buttons])

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP
def get_external_ip():
    try:
        response = requests.get("https://api.ipify.org", timeout=10)
        if response.status_code == 200:
            return response.text
        return "IP –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except requests.Timeout:
        return "–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è."
    except requests.ConnectionError:
        return "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
    except requests.RequestException as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}"
SERVER_IP = get_external_ip()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
def get_server_info():
    ip = SERVER_IP
    uptime_seconds = int(psutil.boot_time())
    uptime = datetime.now() - datetime.fromtimestamp(uptime_seconds)
    cpu = psutil.cpu_percent()
    mem = psutil.virtual_memory().percent
    hostname = socket.gethostname()
    os_version = platform.platform()
    return f"""<b>üíª –°–µ—Ä–≤–µ—Ä:</b> <code>{hostname}</code>
<b>üåê IP:</b> <code>{ip}</code>
<b>üïí –ê–ø—Ç–∞–π–º:</b> <code>{str(uptime).split('.')[0]}</code>
<b>üß† RAM:</b> <code>{mem}%</code>
<b>‚ö° CPU:</b> <code>{cpu}%</code>
<b>üõ† –û–°:</b> <code>{os_version}</code>
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await delete_last_menus(user_id)

    for mid in get_last_menu_ids(user_id):
        try:
            await bot.delete_message(user_id, mid)
        except Exception:
            pass

    if user_id == ADMIN_ID:
        info = get_server_info()
        msg = await message.answer(
            info + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>",
            reply_markup=create_main_menu(),
            parse_mode="HTML"
        )
        set_last_menu_id(user_id, msg.message_id)
        await state.set_state(VPNSetup.choosing_option)
        return

    if is_approved_user(user_id):
        save_user_id(user_id)
        client_name = get_profile_name(user_id)
        if not await client_exists("openvpn", client_name):
            result = await execute_script("1", client_name, "30")
            if result["returncode"] != 0:
                msg = await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                set_last_menu_id(user_id, msg.message_id)
                return
        msg = await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, <b>—Ç–≤–æ–π VPN-–∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id):.2f} RUB\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
            reply_markup=create_user_menu(client_name, user_id=user_id)
        )
        set_last_menu_id(user_id, msg.message_id)
        return

    if is_pending(user_id):
        msg = await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø —É–∂–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
        set_last_menu_id(user_id, msg.message_id)
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø", callback_data="send_request")]
    ])
    msg = await message.answer(
        "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ VPN. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:", 
        reply_markup=markup
    )
    set_last_menu_id(user_id, msg.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
@dp.callback_query(lambda c: c.data == "send_request")
async def send_request(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if is_pending(user_id):
        await callback.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", show_alert=True)
        return
    add_pending(user_id, callback.from_user.username, callback.from_user.full_name)
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}")],
        [InlineKeyboardButton(text="‚úèÔ∏è –û–¥–æ–±—Ä–∏—Ç—å —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∏–º–µ–Ω–∏", callback_data=f"approve_rename_{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")]
    ])
    await safe_send_message(
        ADMIN_ID,
        f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\nID: <code>{user_id}</code>\nUsername: @{callback.from_user.username or '-'}\n–ò–º—è: {callback.from_user.full_name or '-'}",
        reply_markup=markup,
        parse_mode="HTML"
    )
    await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∂–¥–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query(lambda c: c.data == "view_all_balances")
async def view_all_balances(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    users = get_all_users_balances()
    if not users:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        await callback.answer()
        return
    text = "üí∞ <b>–ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for user_id, profile_name, balance in users:
        text += f"ID: <code>{user_id}</code>, –ò–º—è: {profile_name}, –ë–∞–ª–∞–Ω—Å: {balance:.2f} RUB\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@dp.callback_query(lambda c: c.data == "top_up_balance")
async def top_up_balance(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await delete_last_menus(user_id)
    try:
        await callback.message.delete()
    except Exception:
        pass
    msg = await bot.send_message(
        user_id,
        "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ RUB, –º–∏–Ω–∏–º—É–º 100):",
        reply_markup=cancel_markup
    )
    await state.set_state(PaymentStates.waiting_for_amount)
    await state.update_data(input_message_id=msg.message_id)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(PaymentStates.waiting_for_amount)
async def process_payment_amount(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    input_msg_id = data.get("input_message_id")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—É–º–º—ã
    if input_msg_id:
        try:
            await bot.delete_message(user_id, input_msg_id)
        except Exception:
            pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        client_name = get_profile_name(user_id)
        await show_menu(
            user_id,
            f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>:",
            create_user_menu(client_name, user_id=user_id)
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—É–º–º—ã
    try:
        amount = float(message.text.strip())
        if amount < 100:
            warn = await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 100 RUB.", reply_markup=cancel_markup)
            await asyncio.sleep(1.5)
            try:
                await warn.delete()
            except:
                pass
            msg = await bot.send_message(
                user_id,
                "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ RUB, –º–∏–Ω–∏–º—É–º 100):",
                reply_markup=cancel_markup
            )
            await state.update_data(input_message_id=msg.message_id)
            return
    except ValueError:
        warn = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ).", reply_markup=cancel_markup)
        await asyncio.sleep(1.5)
        try:
            await warn.delete()
        except:
            pass
        msg = await bot.send_message(
            user_id,
            "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ RUB, –º–∏–Ω–∏–º—É–º 100):",
            reply_markup=cancel_markup
        )
        await state.update_data(input_message_id=msg.message_id)
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
    try:
        payment = create_payment(user_id, amount)
        confirmation_url = payment.confirmation.confirmation_url
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=confirmation_url)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
        ])
        msg = await bot.send_message(
            user_id,
            f"üí∏ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount:.2f} RUB –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=markup
        )
        await state.set_state(PaymentStates.waiting_for_payment_confirmation)
        await state.update_data(payment_id=payment.id, amount=amount, message_id=msg.message_id)
    except Exception as e:
        await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        await state.clear()
        client_name = get_profile_name(user_id)
        await show_menu(
            user_id,
            f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>:",
            create_user_menu(client_name, user_id=user_id)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞
@dp.callback_query(lambda c: c.data == "cancel_payment")
async def cancel_payment(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await delete_last_menus(user_id)
    await state.clear()
    client_name = get_profile_name(user_id)
    await show_menu(
        user_id,
        f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>:",
        create_user_menu(client_name, user_id=user_id)
    )
    await callback.message.delete()
    await callback.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
@dp.callback_query(lambda c: c.data.startswith("check_payment_"))
async def check_payment(callback: types.CallbackQuery, state: FSMContext):
    payment_id = callback.data.split("_")[2]
    user_id = callback.from_user.id
    data = await state.get_data()
    amount = data.get("amount")
    
    try:
        status = await check_payment_status(payment_id)
        update_payment_status(payment_id, status)
        
        if status == "succeeded":
            update_user_balance(user_id, amount)
            await callback.message.edit_text(
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞ {amount:.2f} RUB —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id):.2f} RUB",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data=f"back_to_user_menu_{get_profile_name(user_id)}")]
                ])
            )
            await notify_admin_payment(user_id, amount)
            await state.clear()
        elif status == "canceled":
            await callback.message.edit_text(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data=f"back_to_user_menu_{get_profile_name(user_id)}")]
                ])
            )
            await state.clear()
        else:
            await callback.message.edit_text(
                f"‚è≥ –ü–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ: {status}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}")]
                ])
            )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data.startswith("back_to_user_menu_"))
async def back_to_user_menu(callback: types.CallbackQuery):
    client_name = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    await delete_last_menus(user_id)
    await show_menu(
        user_id,
        f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>:",
        create_user_menu(client_name, user_id=user_id)
    )
    await callback.answer()

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
async def notify_admin_payment(user_id, amount):
    client_name = get_profile_name(user_id)
    try:
        await bot.send_message(
            ADMIN_ID,
            f"üí∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code> ({client_name})\n–°—É–º–º–∞: {amount:.2f} RUB",
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"
@dp.callback_query(lambda c: c.data == "show_balance")
async def show_balance(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    balance = get_user_balance(user_id)
    client_name = get_profile_name(user_id)
    await callback.message.edit_text(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} RUB",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_user_menu_{client_name}")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
async def check_pending_payments():
    while True:
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute("SELECT payment_id, user_id, amount FROM payments WHERE status IN ('pending', 'waiting_for_capture')")
        payments = cur.fetchall()
        conn.close()
        
        for payment_id, user_id, amount in payments:
            try:
                status = await check_payment_status(payment_id)
                update_payment_status(payment_id, status)
                if status == "succeeded":
                    update_user_balance(user_id, amount)
                    client_name = get_profile_name(user_id)
                    await safe_send_message(
                        user_id,
                        f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞ {amount:.2f} RUB —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id):.2f} RUB",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data=f"back_to_user_menu_{client_name}")]
                        ])
                    )
                    await notify_admin_payment(user_id, amount)
                elif status == "canceled":
                    await safe_send_message(
                        user_id,
                        "‚ùå –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data=f"back_to_user_menu_{get_profile_name(user_id)}")]
                        ])
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞)

async def main():
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    asyncio.create_task(check_pending_payments())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
    asyncio.create_task(notify_expiring_users())
    await set_bot_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
